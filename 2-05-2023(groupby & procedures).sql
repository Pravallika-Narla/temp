create table car(
car_no int,car_name varchar(30),car_price int,car_quantity int);
insert into car values(112,"tesla",120000,2),
(113,"ford",130000,3),
(114,"bmw",140000,4),
(115,"kia",150000,1),
(116,"tata",160000,5);



select count(car_name),car_price from car group by car_price;-- to print how many cars are there with the same price
select count(car_name) as count_number,car_price from car group by car_price; -- aliasing of count
select count(car_name) from car group by car_price having car_price>13000;
select count(*) from car group by car_price having car_price>=13000;

create table visit(
entry_date date,price int,duration int);
insert into visit values("2023-05-01",1000,20),
("2023-05-01",2000,30),("2023-05-02",3000,40),
("2023-05-03",4000,50),("2023-05-02",5000,40);
select * from visit;

select entry_date,count(*) from visit group by entry_date;

SELECT EXTRACT(YEAR FROM ENTRY_DATE) AS YEAR ,
EXTRACT(MONTH FROM ENTRY_DATE) AS MONTH,
ROUND(AVG(PRICE),3) FROM VISIT -- ROUND FUN WILL ROUND UPTO THE GIVEN NUMBER AS PAFRAMETER
GROUP BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE)
ORDER BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE);

SELECT * FROM VISIT;
SELECT ENTRY_DATE,ROUND(AVG(PRICE),1) AS AVG_PRICE FROM VISIT GROUP BY ENTRY_DATE HAVING COUNT(*) > 1 ORDER BY ENTRY_DATE; -- ALL THESE ENTRIES HAVING MORE THAN ONE ENTRY. IF WE PUT >3 THEN NO ENTRY WILL BE DISPLAYED AS THERE IS NO MORE THAN 3
SELECT ENTRY_DATE,ROUND(AVG(PRICE),1) AS AVG_PRICE FROM VISIT WHERE DURATION>20 GROUP BY ENTRY_DATE HAVING COUNT(*) > 1 ORDER BY ENTRY_DATE; -- ALL THESE ENTRIES HAVING MORE THAN ONE ENTRY. IF WE PUT >3 THEN NO ENTRY WILL BE DISPLAYED AS THERE IS NO MORE THAN 3


SELECT * FROM CUSTOMER;

-- QUERY CUSTOMER BELONGS TO SAME CITY
SELECT CITY,COUNT(*) AS CUSTOMER_CITY FROM CUSTOMER GROUP BY CITY;

CREATE TABLE EMPLOYEE(
EMP_ID INT,NAME VARCHAR(20),AGE INT,COUNTRY VARCHAR(30)
);
INSERT INTO EMPLOYEE VALUES(201,"KUNAL",34,"INDIA"),
(202,"ARJUN",40,"INDIA"),(203,"SUSHANTH",45,"AUSTRALIA"),
(204,"ANIK",50,"NEWZEALAND"),(205,"SUNIL",55,"AUSTRALIA");
SELECT * FROM EMPLOYEE;

SELECT COUNT(COUNTRY),COUNTRY FROM EMPLOYEE GROUP BY COUNTRY HAVING COUNT(COUNTRY)>=1;
-- FINDING OUT EMPLOYEES WHOSE AGE ARE MORE THAN 30
SELECT COUNTRY,COUNT(COUNTRY) FROM EMPLOYEE GROUP BY COUNTRY HAVING MAX(AGE)>35;

CREATE TABLE MANAGER1(
ID INT, NAME VARCHAR(30),GENDER VARCHAR(20),AGE INT,SALARY INT);
INSERT INTO MANAGER1 VALUES (101,"SWAPNA",'F',20,100000),
(102,"SWATHI",'F',20,200000),(103,"SWETHA",'F',22,400000),
(141,"SUMANTH",'M',21,100000),(105,"RAHUL",'M',24,12000),
(106,"SWAPNA",'F',20,100000),(107,"SAMRIN",'F',24,100000);

SELECT * FROM MANAGER1;


SELECT NAME,SUM(SALARY) AS TOTAL_SALARY FROM MANAGER1 GROUP BY NAME HAVING SUM(SALARY) >100000 ORDER BY NAME;
SELECT AGE FROM MANAGER1 GROUP BY AGE HAVING COUNT(AGE) >2;
SELECT AGE FROM MANAGER1 GROUP BY AGE HAVING COUNT(AGE) >1;
SELECT GENDER,MAX(SALARY) AS MAX_SALARY FROM MANAGER1 GROUP BY GENDER HAVING MAX(SALARY) < 200000;


-- STORED PRPOCEDURES:
DELIMITER //
CREATE PROCEDURE GetManagerAGE()
  BEGIN
     select * from manager1 WHERE AGE=20;
  END //

CALL GetManagerInfo() 
CALL GetManagerAGE() 

SELECT * FROM manager1;

select name from manager1 order by rand() limit 1
  



